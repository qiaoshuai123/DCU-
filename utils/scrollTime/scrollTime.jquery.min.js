import jQuery from 'jquery'
import jutils from 'jutils-src'
import { message, Modal } from 'antd'
(function ($, plug) {
  const __DEFS__ = {
    timeShow: true, //时间的显示
    vertical: false, // 纵向排列
    nowDate: '', //日期
    timeStart: '', //开始时间
    timeEnd: '', //结束时间
    borderL: '1px #8d7b88 solid', //绘制线的颜色
    borderH: '1px #8d7b88 solid', //高亮线颜色
    paddingBoth: 30, // 左右的padding值
    plugStyle: '', //样式
    timeGap: 1, //时间间隔
    getTimeArr: false, // 是否是数组
    timeArr: [], //时间组合
    planNameArr: [], //方案名字
    thisDom: {}, // this 指向
    dispatchData: [], // 调度数据
    bgColor: false, // 背景色
    bgData: null, // 背景数据
  }
  const __PROPS__ = {
    _inits: function () {
      // 清除全部层
      const divs = this.find('div')
      if(this.bgColor){
        $(this.find('mark')).remove()
        $(this.find('em')).remove()
      }
      const _this = this
      const stageData = []
      var timeInter
      let tagFlags = true;
      if ($(divs).length > 0) {
        $.each($(divs), (i, item) => {
          $(item).remove()
        })
      }
      if(this.bgColor){
        // console.log('come on baby', this.bgData)
        if (this.bgData.length > 0) {
          $('<mark>播放<i /></mark>').appendTo($(this))
          $('<em><i /></em>').appendTo($(this))
        } else {
          $('<div class="ant-spin ant-spin-spinning ant-spin-show-text"><span class="ant-spin-dot ant-spin-dot-spin"><i class="ant-spin-dot-item"></i><i class="ant-spin-dot-item"></i><i class="ant-spin-dot-item"></i><i class="ant-spin-dot-item"></i></span><div class="ant-spin-text">加载中...</div></div>').appendTo($(this))
        }
        // 当前方案中所有阶段的绿、黄、红时间总和
        let timeAll = 0;
        for (let p = 0; p < this.bgData.length; p++){
          if(this.bgData[p].allRedTime){
            timeAll+= this.bgData[p].allRedTime
          }
          if(this.bgData[p].greenTime){
            timeAll+= this.bgData[p].greenTime
          }
          if(this.bgData[p].yellowFlashTime){
            timeAll+= this.bgData[p].yellowFlashTime
          }
        }
        const widthPx = this.width() / timeAll  // 每秒的间隔
        for (let b = 0; b < this.bgData.length; b++){
          let tDom = $(`<div></div>`)
          let greenStyle = "position:absolute;top:0;right:0;bottom:0;left:0;font-size:12px;color:#fff;text-align:center;line-height:35px;"
          let greenDom = $(`<div style="display:inline-block;position:relative;height:35px;"></div>`).appendTo(tDom)
          if(this.bgData[b].greenTime){
            _this._colorDom(this.bgData[b].greenTime, 'green', greenDom, widthPx)
            const spanDom = $(`<span style=`+greenStyle+` title=`+this.bgData[b].phaseName + '&nbsp;:&nbsp;' +this.bgData[b].greenTime+'s'+`>`+this.bgData[b].phaseName+" : "+this.bgData[b].greenTime+"s"+`</span>`).appendTo(greenDom)
            greenDom.attr('class','greenBarBg')
            greenDom.appendTo(tDom)
            // console.log(,'哈哈...')
          }
          if(this.bgData[b].yellowFlashTime){
            _this._colorDom(this.bgData[b].yellowFlashTime, 'yellow', tDom, widthPx)
          }
          if(this.bgData[b].allRedTime){
            _this._colorDom(this.bgData[b].allRedTime, 'red', tDom, widthPx)
          }
          tDom.appendTo($(this))
          $.each($('.greenBarBg'), (i, obj) => {
            if($(obj).width() < 60){
              $($(obj).find('span')).text('')
            }
          })
        }
        // 播放按钮
        $($(this).find('mark')[0]).on('click', (e) => {
          const _thisDom = this.thisDom
          let timeAdd = _thisDom.state.nowCycleLength !== 0 ? _thisDom.state.nowCycleLength : 0
            !$(e.currentTarget).attr('class') ? $(e.currentTarget).addClass(_this.plugStyle.btnSuspend) : $(e.currentTarget).removeAttr('class')
            // debugger
            if ($(e.currentTarget).attr('class')) {
              timeInter = setInterval(() => {
                let basicsNum = $($(this).parent().find('em')).attr('style') ? +($($(this).parent().find('em')).attr('style').split(":")[1].slice(0, -2)) : _this.paddingBoth
                timeAdd++
                if($($(this).parent().find('em')).attr('style')){
                  $($(this).parent().find('em')).attr('style', 'left:'+(widthPx+basicsNum)+'px')
                }else{
                  $($(this).parent().find('em')).attr('style', 'left:'+(timeAdd*widthPx+_this.paddingBoth)+'px')
                }
                if(basicsNum > +($(this).width() + 29)){
                  timeAdd = 0
                  $($(this).parent().find('em')).attr('style', 'left:'+(timeAdd*widthPx+_this.paddingBoth)+'px')
                }
                _thisDom.setState({
                  nowCycleLength: timeAdd,
                }, () => {
                  this._drawCanvas(timeAdd)
                  // _thisDom.getCrossingCvs('crossing0', _thisDom.state.phaseCvsArr[1], 1)
                })
                // console.log('倒计时数据',this.bgData)
              }, 1000)
            }else{
              $($(this).find('mark')[0]).removeClass()
              clearInterval(timeInter)
            }
        })
      } else {
        if (this.getTimeArr) {
        const timeArrGap = []
        this.timeArr.map((item, index) => {
          if (index === 0) {
            $('#phase_box0').css('display', 'flex')
          } else {
            $('#phase_box'+index).length > 0 ? $('#phase_box'+index).css('display', 'none') : null
          }
          if (this.timeArr[index+1]) {
            const times = (new Date(this.nowDate +' '+this.timeArr[index+1]).getTime() - new Date(this.nowDate +' '+this.timeArr[0]).getTime()) / 1000 / 60
            timeArrGap.push(times)
          }
        })
        const timeC = this._dateForMat(this.nowDate +' '+ this.timeArr[0], this.nowDate +' '+ this.timeArr[this.timeArr.length - 1]) // 时间秒
        let fiveC = 0
        let timeGapNum = 0
        if (this.vertical) {
          // debugger
          let vheight = this.width()
          let vWidth = this.height()
          $(this).attr('style', 'width:' + (vWidth - 70) + 'px;height:' + vheight + 'px;transform-origin:left center;transform: rotate(90deg);')
        }
        const longPx = this.width() / timeC  // 每秒的间隔
        // console.log('时间', timeArrGap)
        for (let j = 0; j < timeC; j++) {
          fiveC++
          if (timeC % (this.timeGap < 5 ? 10 : 60) === 0) {
              
            // 开始时间转成毫秒 和 每次递增的分钟转换成秒
            // console.log('我是:', typeof('07:00'))
            // console.log('我是:', typeof(this.timeArr[0]))
            const showT = new Date(this.nowDate +' '+this.timeArr[0]).getTime() + (fiveC % this.timeGap === 0 ? fiveC : 1) * 1000
            const thisDates = jutils.formatDate(new Date(showT), 'HH:ii')
            
            if (fiveC % (this.timeGap === 1 ? 1 : (60 * this.timeGap)) === 0) {
              // 更新timeGap 值
              this.timeGap = timeArrGap[timeGapNum]
              timeGapNum++
              this.timeShow ? $('<time>' + thisDates + '</time>').appendTo(
                $('<div class='+this.plugStyle.horStepGapBig+'></div>').css({'width':longPx+'px', 'border-right':this.borderH}).appendTo($(this))):$('<div class='+this.plugStyle.horStepGapBig+'></div>').css({
                'width':longPx+'px', 'border-right':this.borderH}).appendTo($(this))
            }else{
              const divBtnBox = $('<div class='+this.plugStyle.horStepGap+'></div>').css({'width':longPx+'px'})
              for(let t =0;t<timeArrGap.length;t++){
                let t1 = (t==0 ? (timeArrGap[t] / 2 * 60) : ((timeArrGap[t] - timeArrGap[t-1]) / 2 + timeArrGap[t-1]) * 60);
                if(t1 === fiveC){
                  const btnStyle = (t!=0 ? "":"background:#7596ea;")
                    // console.log(this.planNameArr[t])
                    $('<b class="btnBox" tag-id="'+t+'" style='+btnStyle+'>'+this.planNameArr[t]+'</b>').on('click', function() {
                          timeArrGap.map((numItem, m) => {
                            $('#phase_box'+m).attr('style','display:none')
                            $($('.btnBox')[m]).attr('style','')
                          })
                          $(this).attr('style','background:#7596ea;')
                          $('#phase_box'+$(this).attr('tag-id')).attr('style','display:flex')
                          // phase_box0
                        }).appendTo(divBtnBox)
                        divBtnBox.appendTo($(this))
                  }else{
                    divBtnBox.appendTo($(this))
                    continue
                  }
                }
            }
            
        } else {
          $('<div class=' + this.plugStyle.stepGapHor + '></div>').css('width', longPx + 'px').appendTo($(this))
        }
      }
      } else {
        const timeCount = this._dateForMat(this.nowDate  +' '+ this.timeStart, this.nowDate  +' '+ this.timeEnd) + this.timeGap * 60 // 时间秒
        let fiveCount = 0
        let tenCount = 0
        // debugger
        if (this.vertical) {
          let vheight = this.width()
          let vWidth = this.height()
          $(this).attr('style', 'width:' + (vWidth - 70) + 'px;height:' + vheight + 'px;transform-origin:left center;transform: rotate(90deg);')
        }
        const wPx = this.width() / timeCount // 每秒的间隔
        // eslint-disable-next-line space-before-blocks
        // 播放按钮
        $(this).find('mark').on('click', (e) => {
          let countNum = 0
          let basicsNum = ($($(this).parent().find('em')).attr('style') && $($(this).parent().find('em')).attr('style') !== 'left: '+(_this.width()+_this.paddingBoth)+'px' ? $($(this).parent().find('em')).attr('style').split(':')[1]  : _this.paddingBoth+'px')
          !$(e.currentTarget).attr('class') ? $(e.currentTarget).addClass(_this.plugStyle.btnSuspend) : $(e.currentTarget).removeAttr('class')
          if(+basicsNum.slice(0, -2) == stageData[stageData.length -1]){
            $($(this).parent().find('em')).css('left', stageData[0]+'px')
          }else{
            for(let s = 0; s<stageData.length; s++){
              if(+basicsNum.slice(0, -2) == stageData[s]){
                countNum = s;
              }
            }
          }
          // debugger
          if ($(e.currentTarget).attr('class')) {
            // +basicsNum.slice(0, -2) === (_this.width()+_this.paddingBoth) ? $($(this).parent().find('em')).css({'left':_this.paddingBoth+'px'}) : $($(this).parent().find('em')).css({'left':basicsNum})
            timeInter = setInterval(() => {
              this._timeDataUpdate(this.thisDom, this, stageData)
              $($(this).parent().find('em')).css('left', stageData[countNum]+'px')
              countNum++;
              if (stageData.length == countNum) {
                countNum = 0
                $($(this).find('mark')[0]).removeClass()
                // basicsNum = stageData[countNum-1] + 'px'
                // $(this).removeAttr('class')
                clearInterval(timeInter)
              }
            }, 1200)
            /* timeInter = setInterval(() => {
              debugger
              this._timeDataUpdate(this.thisDom, this, stageData)
              timeCount > countNum ? countNum++ : countNum
              $($(this).parent().find('em')).css('left', (+basicsNum.slice(0, -2) + wPx * 10 * countNum) > (_this.width() + _this.paddingBoth) ? (_this.width() + _this.paddingBoth) : (+basicsNum.slice(0, -2)+wPx*10*countNum) +'px')
              if ((+basicsNum.slice(0, -2) + wPx * 10 * countNum) > (_this.width() + _this.paddingBoth)) {
                countNum = 0
                basicsNum = this.paddingBoth + 'px'
                $(this).removeAttr('class')
                clearInterval(timeInter)
              }
            }, 1000) */
          } else {
            $($(this).parent().find('em')).css('left', +basicsNum.slice(0,-2) - (wPx * 50) + 'px')
            clearInterval(timeInter)
          }
          return false
        })
        // 拖动按钮
        $(this).find('em').on({
          'mousedown': (e) => {
            setTimeout(() => {
              this._timeDataUpdate(this.thisDom, this, stageData)
            }, 500)
            clearInterval(timeInter)
            $(e.currentTarget).attr('class',_this.plugStyle.cursorStyle)
            const numLeft = e.currentTarget.offsetLeft
            const nowDom = e.currentTarget.getBoundingClientRect()
            $(document).on('mousemove', (event) => {
              // const nowDom = e.currentTarget.getBoundingClientRect()
              // console.log('this', $(this)[0].getBoundingClientRect())
              let leftLong
              if((event.pageX - nowDom.left + numLeft) < 30) {
                leftLong = 30
              } else if((event.pageX - nowDom.left + numLeft) > $(this)[0].getBoundingClientRect().width) {
                leftLong = $(this)[0].getBoundingClientRect().width
              } else {
                leftLong = (event.pageX - nowDom.left + numLeft)
              }
              $(e.currentTarget).attr('style','left:'+ leftLong +'px')
            })
          },
          'mouseup': (e) => {
            $(e.currentTarget).removeAttr('class')
            $(document).off('mousemove')
            $($(this).find('mark')[0]).removeClass()
          }
        })
        for (let i = 0; i < timeCount; i++) {
          fiveCount++
          tenCount++
          if (tenCount % (this.timeGap < 5 ? 10 : 60) === 0 || tenCount === 1) {
            // 开始时间转成毫秒 和 每次递增的分钟转换成秒
            const showTime = new Date(this.nowDate +' '+ this.timeStart).getTime() + (fiveCount % this.timeGap === 0 ? fiveCount : 1) * 1000
            const thisDate = jutils.formatDate(new Date(showTime), 'HH:ii')
            if (fiveCount % (60 * this.timeGap) === 0 || fiveCount === 1) {
              // console.log(this.dispatchData, '调控数据')
              const timeLine = $('<div class='+this.plugStyle.horStepGapBig+'></div>').css({'width':wPx+'px', 'border-right':this.borderH})
              timeLine.on('click', (e) => {
                e.stopPropagation()
                setTimeout(() => {
                  this._timeDataUpdate(this.thisDom, this, stageData)
                }, 500)
                // console.log($(e.currentTarget.parentNode))
                // console.log(($(e.currentTarget.parentNode).find('em')).attr('style','left:'+e.currentTarget.offsetLeft+'px'))
                $($(e.currentTarget.parentNode).find('em')).attr('style','left:'+e.currentTarget.offsetLeft+'px')
                clearInterval(timeInter)
                $($(this).find('mark')[0]).removeClass()
              })
              // console.log(thisDate, '时间节点')
              if (this.dispatchData.length > 0 && this.timeShow) {
                const timeBox = $('<time>' + thisDate + '<span class='+this.plugStyle.timePlanNames+'></span></time>').appendTo(timeLine)
                this.dispatchData.map((item, i) => {
                  if (item.startTime === thisDate) {
                    const _thisDom = this.thisDom
                    // const sDom = $('<s data-index='+i+' title='+item.timePlanTitle+'>'+ item.timePlanTitle +'<span data-index='+i+'><i aria-label="icon: close" tabindex="-1" class="anticon anticon-close"><svg viewBox="64 64 896 896" focusable="false" class="" data-icon="close" width="1em" height="1em" fill="currentColor" aria-hidden="true"><path d="M563.8 512l262.5-312.9c4.4-5.2.7-13.1-6.1-13.1h-79.8c-4.7 0-9.2 2.1-12.3 5.7L511.6 449.8 295.1 191.7c-3-3.6-7.5-5.7-12.3-5.7H203c-6.8 0-10.5 7.9-6.1 13.1L459.4 512 196.9 824.9A7.95 7.95 0 0 0 203 838h79.8c4.7 0 9.2-2.1 12.3-5.7l216.5-258.1 216.5 258.1c3 3.6 7.5 5.7 12.3 5.7h79.8c6.8 0 10.5-7.9 6.1-13.1L563.8 512z"></path></svg></i></span></s>')
                    const sDom = $('<s data-index='+i+' title='+item.timePlanTitle+'>'+ item.timePlanTitle +'</s>')
                    .appendTo(timeBox.children())
                    // 通过关闭按钮删除
                    /* sDom.find('span').on('dblclick', (e) => {
                      e.stopPropagation()
                      Modal.confirm({
                        title: '确定要删除该方案吗？',
                        okText: '确定',
                        cancelText: '取消',
                        onOk : () => {
                          _thisDom.state.dispatchListArr.splice(+$(e.currentTarget).attr("data-index"),1)
                          _thisDom.getScrollRightTime()
                          message.info('删除方案成功!')
                          _thisDom.setState({
                            hiddenSave: false,
                          })
                        }
                      })
                    }) */
                    // 通过拖动删除
                    sDom.on({
                      mousedown:(e) => {
                        e.stopPropagation();
                        sDom.attr('style','cursor:move')
                        if (e.which == 1) {
                          $(document.body).mousemove(function (e) {
                            e.stopPropagation()
                            sDom.offset({
                              left: e.pageX - 35,
                              top: e.pageY - 12.5,
                              cursor:'move',
                            });
                          })
                          $(document.body).mouseup(function (e) {
                            e.stopPropagation()
                            $(document.body).off('mouseup')
                            if (e.pageX < _thisDom.state.relyOnObj.left || e.pageX > _thisDom.state.relyOnObj.right || e.pageY <  _thisDom.state.relyOnObj.top || e.pageY >  _thisDom.state.relyOnObj.bottom) {
                              // debugger
                              if (_thisDom.state.dispatchListArr[+sDom.attr("data-index")].startTime !== _thisDom.state.dispatchTemplateArr[0].startTime) {
                                sDom.attr('style','display:none')
                                Modal.confirm({
                                  title: '确定要删除该方案吗？',
                                  okText: '确定',
                                  cancelText: '取消',
                                  onOk : () => {
                                    sDom.remove()
                                    _thisDom.state.dispatchListArr.splice(+sDom.attr("data-index"),1)
                                    _thisDom.getScrollRightTime()
                                    _thisDom.setState({
                                      hiddenSave: false,
                                    })
                                    message.info('删除方案成功!')
                                  },
                                  onCancel : () => {
                                    sDom.attr('style','')
                                    $(document.body).off('mousemove')
                                  }
                                })
                                
                              } else {
                                message.info('起始方案不能删除!')
                                sDom.attr('style','')
                                $(document.body).off('mousemove')
                              }
                            } else {
                              sDom.attr('style','')
                              $(document.body).off('mousemove')
                            }
                          })
                        }
                      }
                    })
                  }
                })
              } else if (this.timeShow) {
                $('<time>' + thisDate + '</time>').appendTo(timeLine)
              }
              timeLine.appendTo($(this))
              setTimeout(() => {
                if (timeLine[0].offsetLeft !== 0) stageData.push(timeLine[0].offsetLeft)
                // debugger
                $($(this).parent().find('em')).attr('style', 'left:'+stageData[0]+'px')     
              }, 50)
            } else {
              $('<div class='+this.plugStyle.horStepGap+'></div>').css({'width':wPx+'px', 'border-right':this.borderL}).appendTo($(this))
            }
          } else {
            $('<div class=' + this.plugStyle.stepGapHor + '></div>').css('width', wPx + 'px').appendTo($(this))
          }
        }
        $(this).find('div:last-child').remove()
      }
      }
      
    },
    _drawCanvas : function(nowCycleLength) {
      const stageArr = this.bgData; // 0 1 2 3
      const _thisDom = this.thisDom;
      let allTime = 0;
      for (let i = 0; i < stageArr.length; i++) {
        allTime += stageArr[i].greenTime
        if (allTime + 1 == nowCycleLength) {
          // yellow
          _thisDom.getCrossingCvs('crossing0', _thisDom.state.phaseCvsArr[i], i, '', 'yellow')
        }
        allTime += stageArr[i].yellowFlashTime
        if (allTime + 1 == nowCycleLength) {
          // red
          _thisDom.getCrossingCvs('crossing0', _thisDom.state.phaseCvsArr[i], i, '', 'red')
        }
        allTime += stageArr[i].allRedTime
        if (allTime + 1 == nowCycleLength) {
          // green
          _thisDom.getCrossingCvs('crossing0', _thisDom.state.phaseCvsArr[i+1], i+1, '', 'green')
        }
        if (nowCycleLength == 0) {
          _thisDom.getCrossingCvs('crossing0', _thisDom.state.phaseCvsArr[0], 0, '', 'green')
        }
      }
    },
    _colorDom : function(time, color, dom, thisWidth){
      for(let v = 0; v < time; v++){
        $('<div class='+this.plugStyle.horStepGapBig+'></div>').css({'width':thisWidth+'px', 'background':color}).appendTo(dom)
      }
    },
    _dateForMat: (Stime, Etime) => {
      return Math.abs(new Date(Stime).getTime() - new Date(Etime).getTime()) / 1000
    },
    _timeDataUpdate: (thisDom, dom, data) => {
      if ($($(dom).find('em')).attr('style').length < 20) {
        // debugger
        const numLeft = Number(($($(dom).find('em')).attr('style').split(':')[1]).lastIndexOf(';') > -1 ? ($($(dom).find('em')).attr('style').split(':')[1]).slice(0, -3)  :  ($($(dom).find('em')).attr('style').split(':')[1]).slice(0, -2))
        for (let q = 0; q < data.length; q++) {
          if (q === data.length - 1) {
            thisDom.getCrossingCvs(q)
          } else if (numLeft <= data[q]) {
            thisDom.getCrossingCvs(q)
            return
          } else if (numLeft >= data[q] && numLeft < data[q+1]) {
            thisDom.getCrossingCvs(q)
          }
        }
      }
      
    },
  }
  // JQuery对象方式
  $.fn[plug] = function (options) {
    $.extend(this, __DEFS__, options, __PROPS__)
    this._inits()
  }
})(jQuery, 'getScrollTime')

export default jQuery